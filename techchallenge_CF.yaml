AWSTemplateFormatVersion: '2010-09-09'
Description:  This template deploys a simple web application using an ec2 instance and a postgres rds instance.
  One VPC with two subnets are created.  Rds goes in public and the ec2 in the private.
  purposes.
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 172.4.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 172.4.1.0/24
    
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 172.4.3.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 172.4.2.0/24
    
  PersonalSSHCIDR:
    Description: Please enter the IP range (CIDR notation) to ssh into your webserver.  
    Type: String
    Default: 172.4.2.2/32
    
  RDSAZ:
    Description: Please enter the az (us-east-1a) for the az.
    Type: String
    Default: us-east-1b
    
  DBInstanceClassParam: 
    Description: Please enter the instance class type (size) for the DB.
    Type: String
    Default: db.t2.micro
    
  MultiAZbool:
    Description: Change to true if you'd like a multiAZ deployment for disaster recovery.  
    Type: String
    Default: false
    AllowedValues: [true, false]
    
  DBPw:
    Description: This sets the value for the DB password, used to avoid needing secrets.
    Type: String
    Default: idontknoW
    

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1a"
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)


  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1d"
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet2 (AZ1)




  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1b"
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1


  PublicSubnet1RouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2



  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)


  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
      
  mySubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: A group of subnets for the RDS instance.
      DBSubnetGroupName: !Sub ${EnvironmentName} SubnetGroup
      SubnetIds: 
        - Ref: PublicSubnet1
        - Ref: PrivateSubnet1
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} SubnetGroup


  MyPubNACL:
    Type: AWS::EC2::NetworkAcl
    DependsOn: PublicSubnet1
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} NaclPub

  PubInboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: MyPubNACL
    Properties:
      Egress: false
      NetworkAclId:
        Ref: MyPubNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      
  PubOutboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: MyPubNACL
    Properties:
      Egress: true
      NetworkAclId:
        Ref: MyPubNACL
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      
  MyPrivNACL:
    Type: AWS::EC2::NetworkAcl
    DependsOn: PrivateSubnet1
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} NaclPriv

  PrivInboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: MyPrivNACL
    Properties:
      Egress: false
      NetworkAclId:
        Ref: MyPrivNACL
      RuleNumber: 110
      Protocol: -1
      RuleAction: allow
      CidrBlock: !Ref PublicSubnet1CIDR

  PrivOutboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: MyPrivNACL
    Properties:
      Egress: true
      NetworkAclId:
        Ref: MyPrivNACL
      RuleNumber: 110
      Protocol: -1
      RuleAction: allow
      CidrBlock: !Ref PublicSubnet1CIDR
      
  EC2PubSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} EC2Pub
        
        
  SecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2PubSecGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref PersonalSSHCIDR
      
  SecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2PubSecGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
      
  SecurityGroupIngress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2PubSecGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIpv6: ::/0
      
      
  SecurityGroupIngress4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2PubSecGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0   
      
  SecurityGroupIngress5:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2PubSecGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIpv6: ::/0
      
  SecurityGroupIngress6:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2PubSecGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      CidrIp: !Ref PrivateSubnet1CIDR
      
  SecurityGroupEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref EC2PubSecGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      CidrIp: 0.0.0.0/0
      
  PrivSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} RDSPriv
        
  PrivSecGrpIng1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref PrivSecGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      CidrIp: !Ref VpcCIDR
  PrivSecGrpEgr1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref PrivSecGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      CidrIp: !Ref VpcCIDR
  
  WebServerRole:  
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: String
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      RoleName: EC2S3_Access
  
  
  WebServerInstProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles: 
        - Ref: WebServerRole
      
  EC2PubInstance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0915bcb5fa77e4892"
      KeyName: "WebServerKP777"
      IamInstanceProfile: !Ref WebServerInstProfile
      InstanceType: "t2.micro"
      UserData:
        Fn::Base64: !Sub |
          "#!/bin/bash"
          sudo yum -y install go
          sudo curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
          mkdir app
          sudo aws s3 sync s3://servian /app
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} WebApp
      NetworkInterfaces:
        - AssociatePublicIpAddress: "false"
          DeviceIndex: "0"
          GroupSet:
          - Ref: EC2PubSecGroup
          SubnetId:
            Ref: PublicSubnet1
            
  RDSInstance:        
    Type: AWS::RDS::DBInstance
    DependsOn: PrivSecGroup
    Properties: 
      AllocatedStorage: 20
      AvailabilityZone: !Ref RDSAZ
      DBInstanceClass: !Ref DBInstanceClassParam
      DBName: app
      DBSubnetGroupName: !Ref mySubnetGroup
      VPCSecurityGroups: 
        - Ref: PrivSecGroup
      Engine: postgres
      EngineVersion: 12.5
      MasterUsername: Postgres
      MasterUserPassword: !Ref DBPw
      MultiAZ: !Ref MultiAZbool
      Port: 5432
      PubliclyAccessible: false
      StorageType: gp2
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} WebDB


  EC2Pub1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      InstanceId: !Ref EC2PubInstance
      
  myPrivSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      NetworkAclId:
        Ref: MyPrivNACL
         
  myPubSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      NetworkAclId:
        Ref: MyPubNACL

  myPubSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      NetworkAclId:
        Ref: MyPubNACL
        
        
Outputs:
  EC2DNSName:
    Description: The public IP of the EC2 Instance
    Value: !GetAtt EC2PubInstance.PublicIp
  InstanceID:
    Description: DNS name of RDS instance
    Value: !GetAtt RDSInstance.Endpoint.Address
